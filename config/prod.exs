use Mix.Config

config :krihelinator,
  analytics: true

# For production, we configure the host to read the PORT
# from the system environment. Therefore, you will need
# to set PORT=80 before running your server.
#
# You should also configure the url host to something
# meaningful, we use this information when generating URLs.
#
# Finally, we also include the path to a manifest
# containing the digested version of static files. This
# manifest is generated by the mix phoenix.digest task
# which you typically run after static files are built.
config :krihelinator, Krihelinator.Web.Endpoint,
  https: [
    port: 4040,
    compress: true,
    keyfile: "/etc/letsencrypt/live/krihelinator.xyz/privkey.pem",
    cacertfile: "/etc/letsencrypt/live/krihelinator.xyz/chain.pem",
    certfile: "/etc/letsencrypt/live/krihelinator.xyz/cert.pem"
  ],
  root: ".",
  server: true

# Do not print debug messages in production
config :logger, level: :info

# Configure your database
config :krihelinator, Krihelinator.Repo,
  pool_size: 20

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :krihelinator, Krihelinator.Web.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :krihelinator, Krihelinator.Web.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Finally import the config/prod.secret.exs
# which should be versioned separately.
import_config "prod.secret.exs"
